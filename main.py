import os
import logging
import traceback
import requests
import subprocess
from typing import Optional, Tuple
from yt_dlp import YoutubeDL
from config import *
import time
import random
from database import VideoDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
    handlers=[
        logging.FileHandler('video_transfer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
db = VideoDatabase()

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ffmpeg"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True)
        logger.debug("ffmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except FileNotFoundError:
        logger.info("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def download_thumbnail(url: str, output_dir: str, video_title: str = None) -> Optional[str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"""
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–ª–∏ timestamp
        if video_title:
            safe_title = "".join(c for c in video_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            thumbnail_name = f"{safe_title}_thumb_{int(time.time())}.jpg"
        else:
            thumbnail_name = f"thumbnail_{int(time.time())}.jpg"
            
        thumbnail_path = os.path.join(output_dir, thumbnail_name)
        
        with open(thumbnail_path, 'wb') as f:
            f.write(response.content)
            
        logger.debug(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {thumbnail_path}")
        return thumbnail_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}")
        return None

def download_only_thumbnail(url: str, output_dir: str = OUTPUT_DIR) -> Optional[str]:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ —Å YouTube
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ: {url}")
    try:
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            thumbnail_url = info.get('thumbnail')
            title = info.get('title', '')
            
            if thumbnail_url:
                return download_thumbnail(thumbnail_url, output_dir, title)
            else:
                logger.error("–ü—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}")
        return None

def check_video_has_audio(formats: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –≤–∏–¥–µ–æ"""
    for format in formats:
        if format.get('acodec') != 'none':
            return True
    return False

def get_available_formats(url: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ: {url}")
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = []
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç
            best_audio = None
            for f in info.get('formats', []):
                if f.get('vcodec', '') == 'none' and f.get('acodec', 'none') != 'none':
                    if best_audio is None or f.get('filesize', 0) > best_audio.get('filesize', 0):
                        best_audio = f
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
            for f in info.get('formats', []):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ-—Ñ–æ—Ä–º–∞—Ç—ã
                if f.get('vcodec', '') == 'none':
                    continue
                    
                format_id = f.get('format_id', '')
                ext = f.get('ext', '')
                resolution = f.get('resolution', 'unknown')
                filesize = f.get('filesize', 0)
                filesize_mb = filesize / (1024 * 1024) if filesize else 0
                has_audio = f.get('acodec', 'none') != 'none'
                
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑–≤—É–∫–∞ –∏ –µ—Å—Ç—å –ª—É—á—à–∏–π –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if not has_audio and best_audio:
                    combined_format_id = f"{format_id}+{best_audio['format_id']}"
                    combined_filesize = filesize + best_audio.get('filesize', 0)
                    combined_filesize_mb = combined_filesize / (1024 * 1024) if combined_filesize else 0
                    
                    format_str = f"{resolution} ({ext}) + üîä"
                    if combined_filesize_mb > 0:
                        format_str += f" - {combined_filesize_mb:.1f}MB"
                    
                    formats.append({
                        'format_id': combined_format_id,
                        'ext': ext,
                        'resolution': resolution,
                        'filesize': combined_filesize,
                        'has_audio': True,
                        'display': format_str
                    })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                format_str = f"{resolution} ({ext})"
                if filesize_mb > 0:
                    format_str += f" - {filesize_mb:.1f}MB"
                if has_audio:
                    format_str += " üîä"
                else:
                    format_str += " üîá"
                
                formats.append({
                    'format_id': format_id,
                    'ext': ext,
                    'resolution': resolution,
                    'filesize': filesize,
                    'has_audio': has_audio,
                    'display': format_str
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ —Ä–∞–∑–º–µ—Ä—É
            def sort_key(x):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "1920x1080" –ø–æ–ª—É—á–∞–µ–º 1080)
                res = x['resolution']
                height = int(res.split('x')[1]) if 'x' in res else 0
                return (x['has_audio'], height, x['filesize'] if x['filesize'] else 0)
            
            formats.sort(key=sort_key, reverse=True)
            
            return formats
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {str(e)}")
        raise

def download_youtube_video(url: str, output_dir: str = OUTPUT_DIR, format_id: str = None) -> Tuple[str, Optional[str]]:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –∏—Å–ø–æ–ª—å–∑—É—è yt-dlp
    """
    logger.debug(f"–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ download_youtube_video —Å URL: {url}")
    try:
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        with YoutubeDL({'quiet': True}) as ydl:
            info = ydl.extract_info(url, download=False)
            video_title = "".join(c for c in info['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            timestamp = f"{int(time.time())}_{random.randint(1000, 9999)}"
            video_dir = os.path.join(output_dir, f"{video_title}_{timestamp}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –≤–∏–¥–µ–æ
            os.makedirs(video_dir, exist_ok=True)
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ: {video_dir}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        has_ffmpeg = check_ffmpeg()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–≤—É–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        formats = get_available_formats(url)
        if not any(f['has_audio'] for f in formats):
            logger.warning(f"–í–Ω–∏–º–∞–Ω–∏–µ: –≤–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏: {url}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è ffmpeg –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if format_id:
            format_spec = format_id
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑–≤—É–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ª—É—á—à—É—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
            if not any(f['has_audio'] for f in formats if f['format_id'] == format_id):
                format_spec = f"{format_id}+bestaudio/bestaudio"
        elif has_ffmpeg:
            format_spec = 'bestvideo[height>=1080]+bestaudio/best[height>=1080]/best'
        else:
            format_spec = 'best[height>=1080]/best'
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
        postprocessors = []
        if has_ffmpeg:
            postprocessors.extend([
                {
                    'key': 'FFmpegVideoConvertor',
                    'preferedformat': 'mp4',
                },
                {
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'aac',
                },
                {
                    'key': 'FFmpegMetadata',
                    'add_metadata': True,
                },
            ])
            
        ydl_opts = {
            'format': format_spec,
            'outtmpl': f'{video_dir}/%(title)s.%(ext)s',
            'progress_hooks': [download_progress_hook],
            'quiet': True,
            'no_warnings': True,
            'writethumbnail': True,
            'postprocessors': postprocessors,
            'merge_output_format': 'mp4' if has_ffmpeg else None,
            'keepvideo': True,
            'postprocessor_args': [
                '-acodec', 'aac',
                '-vcodec', 'copy'
            ] if has_ffmpeg else [],
        }
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            video_path = os.path.join(video_dir, f"{info['title']}.mp4")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            thumbnail_url = info.get('thumbnail')
            thumbnail_path = None
            if thumbnail_url:
                thumbnail_path = download_thumbnail(thumbnail_url, video_dir, info['title'])
            
            logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
            if thumbnail_path:
                logger.info(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {thumbnail_path}")
            
            return video_path, thumbnail_path
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
        logger.debug(f"–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        raise

def download_progress_hook(d):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è yt-dlp"""
    if d['status'] == 'downloading':
        total = d.get('total_bytes')
        downloaded = d.get('downloaded_bytes', 0)
        if total:
            percentage = (downloaded / total) * 100
            print(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {percentage:.1f}%", end="")
    elif d['status'] == 'finished':
        print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def get_video_info(url: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {url}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    cached_info = db.get_video(url)
    if cached_info:
        logger.debug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
        return cached_info
    
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db.add_video(info)
            return info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}")
        raise

def search_youtube_videos(query: str, min_views: int = 0, excluded_words: list = None, max_results: int = 50) -> list:
    """
    –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    """
    logger.debug(f"–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}, –º–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {min_views}, –º–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {max_results}")
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
            'force_generic_extractor': False,
        }
        
        with YoutubeDL(ydl_opts) as ydl:
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
            search_query = f"ytsearch{min(max_results * 2, 100)}:{query}"
            results = ydl.extract_info(search_query, download=False)
            
            if not results or 'entries' not in results:
                logger.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filtered_videos = []
            excluded_words = [word.lower() for word in (excluded_words or [])]
            
            # –°–ø–∏—Å–æ–∫ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            ukrainian_markers = [
                # –î–æ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
                'ua', '.ua', '—É–∫—Ä', 'ukr',
                
                # –ì–æ—Ä–æ–¥–∞
                '–∫–∏—ó–≤', '–∫–∏–µ–≤', '–ª—å–≤—ñ–≤', '–ª—å–≤–æ–≤', '—Ö–∞—Ä–∫—ñ–≤', '—Ö–∞—Ä—å–∫–æ–≤', 
                '–æ–¥–µ—Å–∞', '–æ–¥–µ—Å—Å–∞', '–¥–Ω—ñ–ø—Ä–æ', '–¥–Ω–µ–ø—Ä', '–∑–∞–ø–æ—Ä—ñ–∂–∂—è', '–∑–∞–ø–æ—Ä–æ–∂—å–µ',
                
                # –Ø–∑—ã–∫–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                '—É–∫—Ä–∞—ó–Ω', '—É–∫—Ä–∞–∏–Ω', '—É–∫—Ä–∞√Ø–Ω',
                '—É–∫—Ä–∞√Ø–Ω—Å—å–∫–æ—é', '—É–∫—Ä–∞√Ø–Ω—Å—å–∫–∞', '—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é', '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
                '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π', '—É–∫—Ä–∞–∏–Ω—Å–∫–∞—è', '–ø–æ-—É–∫—Ä–∞–∏–Ω—Å–∫–∏',
                
                # –ö–∞–Ω–∞–ª—ã –∏ –º–µ–¥–∏–∞
                '—Ç—Å–Ω', '–≥—Ä–æ–º–∞–¥—Å—å–∫–µ', '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ',
                '1+1', '—ñ–Ω—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä', '–Ω–æ–≤–∏–π', '–Ω–æ–≤—ã–π',
                '—É–∫—Ä–∞—ó–Ω–∞', '—É–∫—Ä–∞–∏–Ω–∞', 'ukrainian',
                
                # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                '–ø–µ—Ä–µ–º–æ–≥–∞', '–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å', '–º–∞–π–¥–∞–Ω',
                '—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ', '—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–µ',
                '–≤—ñ—Å—Ç—ñ', '–≤–µ—Å—Ç–∏', '–Ω–æ–≤–∏–Ω–∏', '–Ω–æ–≤–æ—Å—Ç–∏ —É–∫—Ä–∞–∏–Ω—ã'
            ]
            
            for video in results['entries']:
                if len(filtered_videos) >= max_results:
                    break
                    
                if not video:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                is_ukrainian = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                channel_name = video.get('channel', '').lower()
                channel_title = video.get('channel_title', '').lower()
                uploader = video.get('uploader', '').lower()
                
                for channel_identifier in [channel_name, channel_title, uploader]:
                    if any(marker in channel_identifier for marker in ukrainian_markers):
                        is_ukrainian = True
                        logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª: {video.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞
                channel_lang = video.get('channel_language', '').lower()
                if channel_lang in ['uk', 'ua']:
                    is_ukrainian = True
                    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞: {channel_lang}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω—É –∫–∞–Ω–∞–ª–∞
                channel_country = video.get('channel_country', '').lower()
                if channel_country in ['ua', 'ukr', 'ukraine', '—É–∫—Ä–∞—ó–Ω–∞', '—É–∫—Ä–∞–∏–Ω–∞']:
                    is_ukrainian = True
                    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –∫–∞–Ω–∞–ª–∞: {channel_country}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                channel_description = video.get('channel_description', '').lower()
                if any(marker in channel_description for marker in ukrainian_markers):
                    is_ukrainian = True
                    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                title = video.get('title', '').lower()
                description = video.get('description', '').lower()
                
                if any(marker in title for marker in ukrainian_markers):
                    is_ukrainian = True
                    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {video.get('title')}")
                
                if any(marker in description for marker in ukrainian_markers):
                    is_ukrainian = True
                    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∏–¥–µ–æ
                if is_ukrainian:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –≤–∏–¥–µ–æ: {video.get('title')}")
                    continue
                
                view_count = video.get('view_count', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
                if view_count < min_views:
                    continue
                    
                if excluded_words and any(word in description for word in excluded_words):
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    db.add_video(video)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –≤ –ë–î: {str(e)}")
                
                filtered_videos.append({
                    'url': f"https://www.youtube.com/watch?v={video['id']}",
                    'title': video.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'views': view_count,
                    'duration': video.get('duration', 0),
                    'thumbnail': video.get('thumbnail'),
                    'uploader': video.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'description': video.get('description', ''),
                    'upload_date': video.get('upload_date', '')
                })
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {len(filtered_videos)}")
            return filtered_videos[:max_results]
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        logger.debug(f"–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        raise

def get_channel_videos(channel_url: str, max_videos: int = 50) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {channel_url}")
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'force_generic_extractor': False,
            'playlistend': max_videos  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        }
        
        with YoutubeDL(ydl_opts) as ydl:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –µ–≥–æ –≤–∏–¥–µ–æ
            channel_info = ydl.extract_info(
                channel_url,
                download=False,
                process=False
            )
            
            videos = []
            entries = list(channel_info.get('entries', []))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–æ–∫
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            for entry in entries:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                    video_info = ydl.extract_info(
                        entry['url'],
                        download=False,
                        process=False
                    )
                    
                    if not video_info:
                        continue
                    
                    videos.append({
                        'url': f"https://www.youtube.com/watch?v={video_info['id']}",
                        'title': video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'views': video_info.get('view_count', 0),
                        'duration': video_info.get('duration', 0),
                        'thumbnail': video_info.get('thumbnail'),
                        'uploader': video_info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'description': video_info.get('description', ''),
                        'upload_date': video_info.get('upload_date', '')
                    })
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        db.add_video(video_info)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –≤ –ë–î: {str(e)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
                    if len(videos) >= max_videos:
                        break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {str(e)}")
                    continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {len(videos)}")
            return videos
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞: {str(e)}")
        logger.debug(f"–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        raise

if __name__ == "__main__":
    try:
        youtube_video_url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ: ")
        video_path, thumb_path = download_youtube_video(youtube_video_url)
        print(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {video_path}")
        if thumb_path:
            print(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {thumb_path}")
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
